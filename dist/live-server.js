'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var util = require('util');
var fs = require('fs');
var path = require('path');
var chokidar = _interopDefault(require('chokidar'));

function asJSONServerSentEvents(res, subscriptionSet) {
  res.socket.setTimeout(0).setKeepAlive(true).setNoDelay(true);
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive' });

  res.once('error', shutdown);
  res.once('close', shutdown);

  let write = res.write.bind(res);
  res = undefined;

  if (null != subscriptionSet) {
    subscriptionSet.add(sendJSONData);
  }

  write(`\n\n:sse ready\n\n`);
  return sendJSONData;

  function sendJSONData(obj) {
    if (undefined !== write) {
      write(`data: ${JSON.stringify(obj)}\n\n`);
      return true;
    }
  }

  function shutdown(...args) {
    write = undefined;
    if (null != subscriptionSet) {
      subscriptionSet.delete(sendJSONData);
    }
  }
}

const readFile$1 = util.promisify(fs.readFile);

const rx_data_live = /data-live-([a-z-]+)=(?:'([^']+)'|"([^"]+)")/g;
function replaceDataLive(webroot, data_live, source) {
  return source.replace(rx_data_live, (m, attr, val_a, val_b) => {
    const key = path.relative(webroot, path.join(webroot, val_a || val_b));
    return `${attr}='${data_live[key]}' data-live='${attr} ${key}'`;
  });
}

const renderDataLiveView = __express;
async function __express(filePath, locals, callback) {
  const { webroot, data_live } = locals.settings.data_live_info;
  try {
    const source = await readFile$1(filePath, 'utf-8');
    const res = await replaceDataLive(webroot, data_live, source);
    callback(null, res);
  } catch (err) {
    callback(err);
  }
}

function initExpressLiveLoader(app, webroot, options = {}) {
  if (!options) {
    options = {};
  }
  if (undefined === options.view) {
    options.view = true;
  }

  const live_info = initLiveLoader(webroot);
  app.set('data_live_info', live_info);

  if (options.view) {
    if (true === options.view) {
      options.view = 'html';
      app.set('view engine', 'html');
    }

    app.engine(options.view, renderDataLiveView);
  }

  app.get(options.endpoint || '/__live__', (req, res) => asJSONServerSentEvents(res, live_info.subscriptions));

  return live_info;
}

function initLiveLoader(webroot, options) {
  if (!options) {
    options = {};
  }
  let { useProduction } = options;
  if (undefined === useProduction) {
    useProduction = 'production' == process.env.NODE_ENV;
  }

  const subscriptions = new Set();
  const production = {},
        development = {};

  const watcher = chokidar.watch(['*.lnk'], { cwd: webroot }).on('add', updateWatchedLnk).on('change', updateWatchedLnk);

  const self = Object.create(null, {
    subscriptions: { value: subscriptions },
    watcher: { value: watcher } });

  Object.assign(self, {
    webroot, production, development,
    data_live: useProduction ? production : development });

  return self;

  function live_sendChange(obj) {
    console.log('Live changes', subscriptions.size, obj);
    for (const sendChange of subscriptions.values()) {
      sendChange(obj);
    }
  }

  async function updateWatchedLnk(fname) {
    const filePath = path.join(webroot, fname);
    const key = path.relative(webroot, filePath.replace(/.lnk$/, ''));
    const tgt = path.join(path.dirname(key), (await readFile$1(filePath, 'utf-8')));

    const minified = fname.includes('.min.');
    if (minified) {
      production[key] = tgt;
    } else if (tgt != development[key]) {
      development[key] = tgt;
      live_sendChange(development);
    }
  }
}

exports.asJSONServerSentEvents = asJSONServerSentEvents;
exports.rx_data_live = rx_data_live;
exports.replaceDataLive = replaceDataLive;
exports.renderDataLiveView = renderDataLiveView;
exports.__express = __express;
exports.initExpressLiveLoader = initExpressLiveLoader;
exports.initLiveLoader = initLiveLoader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
