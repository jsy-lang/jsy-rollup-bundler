import { promisify } from 'util';
import { readFile } from 'fs';
import { dirname, join, relative } from 'path';
import chokidar from 'chokidar';

function asJSONServerSentEvents(res, subscriptionSet) {
  res.socket.setTimeout(0).setKeepAlive(true).setNoDelay(true);
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive' });

  res.once('error', shutdown);
  res.once('close', shutdown);

  let write = res.write.bind(res);
  res = undefined;

  if (null != subscriptionSet) {
    subscriptionSet.add(sendJSONData);
  }

  write(`\n\n:sse ready\n\n`);
  return sendJSONData;

  function sendJSONData(obj) {
    if (undefined !== write) {
      write(`data: ${JSON.stringify(obj)}\n\n`);
      return true;
    }
  }

  function shutdown(...args) {
    write = undefined;
    if (null != subscriptionSet) {
      subscriptionSet.delete(sendJSONData);
    }
  }
}

const readFile$1 = promisify(readFile);

const rx_data_live = /data-live-([a-z-]+)=(?:'([^']+)'|"([^"]+)")/g;
function replaceDataLive(webroot, data_live, source) {
  return source.replace(rx_data_live, (m, attr, val_a, val_b) => {
    const key = relative(webroot, join(webroot, val_a || val_b));
    return `${attr}='${data_live[key]}' data-live='${attr} ${key}'`;
  });
}

const renderDataLiveView = __express;
async function __express(filePath, locals, callback) {
  const { webroot, data_live } = locals.settings.data_live_info;
  try {
    const source = await readFile$1(filePath, 'utf-8');
    const res = await replaceDataLive(webroot, data_live, source);
    callback(null, res);
  } catch (err) {
    callback(err);
  }
}

function _initOptions(options) {
  if (!options) {
    options = {};
  }
  if (undefined === options.view) {
    options.view = true;
  }
  if (undefined === options.useProduction) {
    options.useProduction = 'production' == process.env.NODE_ENV;
  }
  return options;
}

function initExpressLiveLoader(app, webroot, options = {}) {
  options = _initOptions(options);
  const { useProduction } = options;

  const live_info = initLiveLoader(webroot, options);
  app.set('data_live_info', live_info);

  if (options.view) {
    if (true === options.view) {
      options.view = 'html';
      app.set('view engine', 'html');
    }

    app.engine(options.view, renderDataLiveView);
  }

  if (!useProduction) {
    app.get(options.endpoint || '/__live__', (req, res) => live_info.sendChange(asJSONServerSentEvents(res, live_info.subscriptions)));
  }

  return live_info;
}

function initLiveLoader(webroot, options) {
  options = _initOptions(options);
  const { useProduction } = options;

  const subscriptions = new Set();
  const production = {},
        development = {},
        dev_errors = new Map();

  const watchers = [];

  watchers.push(chokidar.watch(['*.lnk'], { cwd: webroot }).on('add', updateWatchedLnk).on('change', updateWatchedLnk));

  if (useProduction) {
    setTimeout(() => watchers.forEach(e => e.close()), 60000);
  } else {
    watchers.push(chokidar.watch(['*.err*'], { cwd: webroot }).on('add', updateWatchedErr).on('change', updateWatchedErr).on('unlink', updateWatchedErr));
  }

  const self = Object.create(null, {
    subscriptions: { value: subscriptions },
    sendChange: { value: live_sendChange },
    watchers: { value: watchers } });

  Object.assign(self, {
    webroot, production, development,
    data_live: useProduction ? production : development,
    useProduction });

  return self;

  function live_sendChange(lst) {
    if (null == lst) {
      lst = subscriptions.values();
    } else if ('function' === typeof lst) {
      lst = [lst];
    }

    for (const sendChange of lst) {
      sendChange({
        live: development,
        errors: Array.from(dev_errors.values()) });
    }
  }

  async function updateWatchedLnk(fname) {
    const filePath = join(webroot, fname);
    const key = relative(webroot, filePath.replace(/.lnk$/, ''));
    const tgt = join(dirname(key), (await readFile$1(filePath, 'utf-8')));

    const minified = fname.includes('.min.');
    if (minified) {
      production[key] = tgt;
      production[key.replace('.min.', '.')] = tgt;
    } else if (tgt != development[key]) {
      development[key] = tgt;
      live_sendChange();
    }
  }

  async function updateWatchedErr(fname) {
    const filePath = join(webroot, fname);
    const key = filePath.replace(/.err\w*$/, '');

    let err_msg;
    try {
      err_msg = await readFile$1(filePath, 'utf-8');
    } catch (err) {
      if ('ENOENT' !== err.code) {
        return console.error(err);
      }
      err_msg = '';
    }

    if (err_msg) {
      dev_errors.set(fname, err_msg);
    } else {
      dev_errors.delete(fname);
    }

    live_sendChange();
  }
}

export { asJSONServerSentEvents, rx_data_live, replaceDataLive, renderDataLiveView, __express, initExpressLiveLoader, initLiveLoader };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1zZXJ2ZXIubWpzIiwic291cmNlcyI6WyIuLi9jb2RlL3NlcnZlclNlbnRFdmVudHMuanN5IiwiLi4vY29kZS9saXZlLXNlcnZlci5qc3kiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXNKU09OU2VydmVyU2VudEV2ZW50cyhyZXMsIHN1YnNjcmlwdGlvblNldCkgOjpcbiAgcmVzLnNvY2tldC5zZXRUaW1lb3V0KDApLnNldEtlZXBBbGl2ZSh0cnVlKS5zZXROb0RlbGF5KHRydWUpXG4gIHJlcy53cml0ZUhlYWQgQCAyMDAsIEA6XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2V2ZW50LXN0cmVhbSdcbiAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZSdcbiAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJ1xuXG4gIHJlcy5vbmNlIEAgJ2Vycm9yJywgc2h1dGRvd25cbiAgcmVzLm9uY2UgQCAnY2xvc2UnLCBzaHV0ZG93blxuXG4gIGxldCB3cml0ZSA9IHJlcy53cml0ZS5iaW5kKHJlcylcbiAgcmVzID0gdW5kZWZpbmVkXG5cbiAgaWYgbnVsbCAhPSBzdWJzY3JpcHRpb25TZXQgOjpcbiAgICBzdWJzY3JpcHRpb25TZXQuYWRkIEAgc2VuZEpTT05EYXRhXG5cbiAgd3JpdGUgQCBgXFxuXFxuOnNzZSByZWFkeVxcblxcbmBcbiAgcmV0dXJuIHNlbmRKU09ORGF0YVxuXG4gIGZ1bmN0aW9uIHNlbmRKU09ORGF0YShvYmopIDo6XG4gICAgaWYgdW5kZWZpbmVkICE9PSB3cml0ZSA6OlxuICAgICAgd3JpdGUgQCBgZGF0YTogJHtKU09OLnN0cmluZ2lmeShvYmopfVxcblxcbmBcbiAgICAgIHJldHVybiB0cnVlXG5cbiAgZnVuY3Rpb24gc2h1dGRvd24oLi4uYXJncykgOjpcbiAgICB3cml0ZSA9IHVuZGVmaW5lZFxuICAgIGlmIG51bGwgIT0gc3Vic2NyaXB0aW9uU2V0IDo6XG4gICAgICBzdWJzY3JpcHRpb25TZXQuZGVsZXRlIEAgc2VuZEpTT05EYXRhXG5cbiIsImltcG9ydCB7cHJvbWlzaWZ5fSBmcm9tICd1dGlsJ1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgY2hva2lkYXIgZnJvbSAnY2hva2lkYXInXG5pbXBvcnQgYXNKU09OU2VydmVyU2VudEV2ZW50cyBmcm9tICcuL3NlcnZlclNlbnRFdmVudHMuanN5J1xuXG5jb25zdCByZWFkRmlsZSA9IHByb21pc2lmeSBAIGZzLnJlYWRGaWxlXG5cbmV4cG9ydCB7YXNKU09OU2VydmVyU2VudEV2ZW50c31cblxuZXhwb3J0IGNvbnN0IHJ4X2RhdGFfbGl2ZSA9IC9kYXRhLWxpdmUtKFthLXotXSspPSg/OicoW14nXSspJ3xcIihbXlwiXSspXCIpL2dcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlRGF0YUxpdmUod2Vicm9vdCwgZGF0YV9saXZlLCBzb3VyY2UpIDo6XG4gIHJldHVybiBzb3VyY2UucmVwbGFjZSBAIHJ4X2RhdGFfbGl2ZSwgKG0sIGF0dHIsIHZhbF9hLCB2YWxfYikgPT4gOjpcbiAgICBjb25zdCBrZXkgPSBwYXRoLnJlbGF0aXZlIEAgd2Vicm9vdCxcbiAgICAgIHBhdGguam9pbiBAIHdlYnJvb3QsIHZhbF9hIHx8IHZhbF9iXG4gICAgcmV0dXJuIGAke2F0dHJ9PScke2RhdGFfbGl2ZVtrZXldfScgZGF0YS1saXZlPScke2F0dHJ9ICR7a2V5fSdgXG5cblxuZXhwb3J0IGNvbnN0IHJlbmRlckRhdGFMaXZlVmlldyA9IF9fZXhwcmVzc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9fZXhwcmVzcyhmaWxlUGF0aCwgbG9jYWxzLCBjYWxsYmFjaykgOjpcbiAgY29uc3Qge3dlYnJvb3QsIGRhdGFfbGl2ZX0gPSBsb2NhbHMuc2V0dGluZ3MuZGF0YV9saXZlX2luZm9cbiAgdHJ5IDo6XG4gICAgY29uc3Qgc291cmNlID0gYXdhaXQgcmVhZEZpbGUgQCBmaWxlUGF0aCwgJ3V0Zi04J1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcGxhY2VEYXRhTGl2ZSBAIHdlYnJvb3QsIGRhdGFfbGl2ZSwgc291cmNlXG4gICAgY2FsbGJhY2sobnVsbCwgcmVzKVxuICBjYXRjaCBlcnIgOjpcbiAgICBjYWxsYmFjayhlcnIpXG5cblxuXG5mdW5jdGlvbiBfaW5pdE9wdGlvbnMob3B0aW9ucykgOjpcbiAgaWYgISBvcHRpb25zIDo6IG9wdGlvbnMgPSB7fVxuICBpZiB1bmRlZmluZWQgPT09IG9wdGlvbnMudmlldyA6OlxuICAgIG9wdGlvbnMudmlldyA9IHRydWVcbiAgaWYgdW5kZWZpbmVkID09PSBvcHRpb25zLnVzZVByb2R1Y3Rpb24gOjpcbiAgICBvcHRpb25zLnVzZVByb2R1Y3Rpb24gPSAncHJvZHVjdGlvbicgPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlZcbiAgcmV0dXJuIG9wdGlvbnNcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRFeHByZXNzTGl2ZUxvYWRlcihhcHAsIHdlYnJvb3QsIG9wdGlvbnM9e30pIDo6XG4gIG9wdGlvbnMgPSBfaW5pdE9wdGlvbnMob3B0aW9ucylcbiAgY29uc3Qge3VzZVByb2R1Y3Rpb259ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGxpdmVfaW5mbyA9IGluaXRMaXZlTG9hZGVyKHdlYnJvb3QsIG9wdGlvbnMpXG4gIGFwcC5zZXQgQCAnZGF0YV9saXZlX2luZm8nLCBsaXZlX2luZm9cblxuICBpZiBvcHRpb25zLnZpZXcgOjpcbiAgICBpZiB0cnVlID09PSBvcHRpb25zLnZpZXcgOjpcbiAgICAgIG9wdGlvbnMudmlldyA9ICdodG1sJ1xuICAgICAgYXBwLnNldCBAICd2aWV3IGVuZ2luZScsICdodG1sJ1xuXG4gICAgYXBwLmVuZ2luZSBAIG9wdGlvbnMudmlldywgcmVuZGVyRGF0YUxpdmVWaWV3XG5cbiAgaWYgISB1c2VQcm9kdWN0aW9uIDo6XG4gICAgYXBwLmdldCBAIG9wdGlvbnMuZW5kcG9pbnQgfHwgJy9fX2xpdmVfXycsIChyZXEsIHJlcykgPT5cbiAgICAgIGxpdmVfaW5mby5zZW5kQ2hhbmdlIEAgXG4gICAgICAgIGFzSlNPTlNlcnZlclNlbnRFdmVudHMocmVzLCBsaXZlX2luZm8uc3Vic2NyaXB0aW9ucylcblxuICByZXR1cm4gbGl2ZV9pbmZvXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0TGl2ZUxvYWRlcih3ZWJyb290LCBvcHRpb25zKSA6OlxuICBvcHRpb25zID0gX2luaXRPcHRpb25zKG9wdGlvbnMpXG4gIGNvbnN0IHt1c2VQcm9kdWN0aW9ufSA9IG9wdGlvbnNcblxuICBjb25zdCBzdWJzY3JpcHRpb25zID0gbmV3IFNldCgpXG4gIGNvbnN0IHByb2R1Y3Rpb24gPSB7fSwgZGV2ZWxvcG1lbnQgPSB7fSwgZGV2X2Vycm9ycyA9IG5ldyBNYXAoKVxuXG4gIGNvbnN0IHdhdGNoZXJzID0gW11cblxuICB3YXRjaGVycy5wdXNoIEAgY2hva2lkYXJcbiAgICAud2F0Y2ggQCBbJyoubG5rJ10sIEA6IGN3ZDogd2Vicm9vdFxuICAgIC5vbiBAICdhZGQnLCB1cGRhdGVXYXRjaGVkTG5rXG4gICAgLm9uIEAgJ2NoYW5nZScsIHVwZGF0ZVdhdGNoZWRMbmtcblxuICBpZiB1c2VQcm9kdWN0aW9uIDo6XG4gICAgc2V0VGltZW91dCBAICgpID0+IHdhdGNoZXJzLmZvckVhY2goZT0+ZS5jbG9zZSgpKSwgNjAwMDBcblxuICBlbHNlIDo6IFxuICAgIHdhdGNoZXJzLnB1c2ggQCBjaG9raWRhclxuICAgICAgLndhdGNoIEAgWycqLmVycionXSwgQDogY3dkOiB3ZWJyb290XG4gICAgICAub24gQCAnYWRkJywgdXBkYXRlV2F0Y2hlZEVyclxuICAgICAgLm9uIEAgJ2NoYW5nZScsIHVwZGF0ZVdhdGNoZWRFcnJcbiAgICAgIC5vbiBAICd1bmxpbmsnLCB1cGRhdGVXYXRjaGVkRXJyXG5cbiAgY29uc3Qgc2VsZiA9IE9iamVjdC5jcmVhdGUgQCBudWxsLCBAe31cbiAgICBzdWJzY3JpcHRpb25zOiBAe30gdmFsdWU6IHN1YnNjcmlwdGlvbnNcbiAgICBzZW5kQ2hhbmdlOiBAe30gdmFsdWU6IGxpdmVfc2VuZENoYW5nZVxuICAgIHdhdGNoZXJzOiBAe30gdmFsdWU6IHdhdGNoZXJzXG5cbiAgT2JqZWN0LmFzc2lnbiBAIHNlbGYsIEB7fVxuICAgIHdlYnJvb3QsIHByb2R1Y3Rpb24sIGRldmVsb3BtZW50XG4gICAgZGF0YV9saXZlOiB1c2VQcm9kdWN0aW9uID8gcHJvZHVjdGlvbiA6IGRldmVsb3BtZW50XG4gICAgdXNlUHJvZHVjdGlvblxuXG4gIHJldHVybiBzZWxmXG5cbiAgZnVuY3Rpb24gbGl2ZV9zZW5kQ2hhbmdlKGxzdCkgOjpcbiAgICBpZiBudWxsID09IGxzdCA6OlxuICAgICAgbHN0ID0gc3Vic2NyaXB0aW9ucy52YWx1ZXMoKVxuICAgIGVsc2UgaWYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxzdCA6OlxuICAgICAgbHN0ID0gW2xzdF1cblxuICAgIGZvciBjb25zdCBzZW5kQ2hhbmdlIG9mIGxzdCA6OlxuICAgICAgc2VuZENoYW5nZSBAOlxuICAgICAgICBsaXZlOiBkZXZlbG9wbWVudFxuICAgICAgICBlcnJvcnM6IEFycmF5LmZyb20gQCBkZXZfZXJyb3JzLnZhbHVlcygpXG5cbiAgYXN5bmMgZnVuY3Rpb24gdXBkYXRlV2F0Y2hlZExuayhmbmFtZSkgOjpcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbih3ZWJyb290LCBmbmFtZSlcbiAgICBjb25zdCBrZXkgPSBwYXRoLnJlbGF0aXZlIEAgd2Vicm9vdCwgZmlsZVBhdGgucmVwbGFjZSgvLmxuayQvLCAnJylcbiAgICBjb25zdCB0Z3QgPSBwYXRoLmpvaW4gQCBwYXRoLmRpcm5hbWUoa2V5KSwgYXdhaXQgcmVhZEZpbGUgQCBmaWxlUGF0aCwgJ3V0Zi04J1xuXG4gICAgY29uc3QgbWluaWZpZWQgPSBmbmFtZS5pbmNsdWRlcygnLm1pbi4nKVxuICAgIGlmIG1pbmlmaWVkIDo6XG4gICAgICBwcm9kdWN0aW9uW2tleV0gPSB0Z3RcbiAgICAgIHByb2R1Y3Rpb25ba2V5LnJlcGxhY2UoJy5taW4uJywnLicpXSA9IHRndFxuXG4gICAgZWxzZSBpZiB0Z3QgIT0gZGV2ZWxvcG1lbnRba2V5XSA6OlxuICAgICAgZGV2ZWxvcG1lbnRba2V5XSA9IHRndFxuICAgICAgbGl2ZV9zZW5kQ2hhbmdlKClcblxuICBhc3luYyBmdW5jdGlvbiB1cGRhdGVXYXRjaGVkRXJyKGZuYW1lKSA6OlxuICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHdlYnJvb3QsIGZuYW1lKVxuICAgIGNvbnN0IGtleSA9IGZpbGVQYXRoLnJlcGxhY2UoLy5lcnJcXHcqJC8sICcnKVxuXG4gICAgbGV0IGVycl9tc2dcbiAgICB0cnkgOjpcbiAgICAgIGVycl9tc2cgPSBhd2FpdCByZWFkRmlsZSBAIGZpbGVQYXRoLCAndXRmLTgnXG4gICAgY2F0Y2ggZXJyIDo6XG4gICAgICBpZiAnRU5PRU5UJyAhPT0gZXJyLmNvZGUgOjpcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IgQCBlcnJcbiAgICAgIGVycl9tc2cgPSAnJ1xuXG4gICAgaWYgZXJyX21zZyA6OlxuICAgICAgZGV2X2Vycm9ycy5zZXQgQCBmbmFtZSwgZXJyX21zZ1xuICAgIGVsc2UgOjpcbiAgICAgIGRldl9lcnJvcnMuZGVsZXRlIEAgZm5hbWVcblxuICAgIGxpdmVfc2VuZENoYW5nZSgpXG4iXSwibmFtZXMiOlsiYXNKU09OU2VydmVyU2VudEV2ZW50cyIsInJlcyIsInN1YnNjcmlwdGlvblNldCIsInNvY2tldCIsInNldFRpbWVvdXQiLCJzZXRLZWVwQWxpdmUiLCJzZXROb0RlbGF5Iiwid3JpdGVIZWFkIiwib25jZSIsInNodXRkb3duIiwid3JpdGUiLCJiaW5kIiwidW5kZWZpbmVkIiwiYWRkIiwic2VuZEpTT05EYXRhIiwib2JqIiwiSlNPTiIsInN0cmluZ2lmeSIsImFyZ3MiLCJkZWxldGUiLCJyZWFkRmlsZSIsInByb21pc2lmeSIsImZzIiwicnhfZGF0YV9saXZlIiwicmVwbGFjZURhdGFMaXZlIiwid2Vicm9vdCIsImRhdGFfbGl2ZSIsInNvdXJjZSIsInJlcGxhY2UiLCJtIiwiYXR0ciIsInZhbF9hIiwidmFsX2IiLCJrZXkiLCJwYXRoIiwicmVuZGVyRGF0YUxpdmVWaWV3IiwiX19leHByZXNzIiwiZmlsZVBhdGgiLCJsb2NhbHMiLCJjYWxsYmFjayIsInNldHRpbmdzIiwiZGF0YV9saXZlX2luZm8iLCJlcnIiLCJfaW5pdE9wdGlvbnMiLCJvcHRpb25zIiwidmlldyIsInVzZVByb2R1Y3Rpb24iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJpbml0RXhwcmVzc0xpdmVMb2FkZXIiLCJhcHAiLCJsaXZlX2luZm8iLCJpbml0TGl2ZUxvYWRlciIsInNldCIsImVuZ2luZSIsImdldCIsImVuZHBvaW50IiwicmVxIiwic2VuZENoYW5nZSIsInN1YnNjcmlwdGlvbnMiLCJTZXQiLCJwcm9kdWN0aW9uIiwiZGV2ZWxvcG1lbnQiLCJkZXZfZXJyb3JzIiwiTWFwIiwid2F0Y2hlcnMiLCJwdXNoIiwiY2hva2lkYXIiLCJ3YXRjaCIsImN3ZCIsIm9uIiwidXBkYXRlV2F0Y2hlZExuayIsImZvckVhY2giLCJlIiwiY2xvc2UiLCJ1cGRhdGVXYXRjaGVkRXJyIiwic2VsZiIsIk9iamVjdCIsImNyZWF0ZSIsInZhbHVlIiwibGl2ZV9zZW5kQ2hhbmdlIiwiYXNzaWduIiwibHN0IiwidmFsdWVzIiwiQXJyYXkiLCJmcm9tIiwiZm5hbWUiLCJ0Z3QiLCJtaW5pZmllZCIsImluY2x1ZGVzIiwiZXJyX21zZyIsImNvZGUiLCJjb25zb2xlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQWUsU0FBU0Esc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDQyxlQUFyQyxFQUFzRDtNQUMvREMsTUFBSixDQUFXQyxVQUFYLENBQXNCLENBQXRCLEVBQXlCQyxZQUF6QixDQUFzQyxJQUF0QyxFQUE0Q0MsVUFBNUMsQ0FBdUQsSUFBdkQ7TUFDSUMsU0FBSixDQUFnQixHQUFoQixFQUF1QjtvQkFDTCxtQkFESztxQkFFSixVQUZJO2tCQUdQLFlBSE8s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
