import ErrorOverlay from 'react-error-overlay';

function connectReloadEventSource$1(opts) {
  if (null == opts) {
    opts = {};
  } else if ('function' === typeof opts) {
    opts = { on_update: opts };
  }

  const url = opts.url || '__live__';

  if (null == opts.show_errors) {
    opts.show_errors = function (errorList) {
      for (const err_msg of errorList) {
        console.error(err_msg);
      }
    };
  }

  if (null == opts.on_update) {
    const uid = Date.now().toString(36);
    opts.on_update = function ({ live, errors }) {
      if (errors && errors.length) {
        console.warn(`Live reload (${uid}) with errors`);
      } else console.warn(`Live reload (${uid}) success`);

      opts.show_errors(errors || []);
      reloadDataLiveElements(live, window.document);
    };
  }

  const _live_reload_global_ = `@@live-reload ${url}`;
  if (null != window[_live_reload_global_]) {
    window[_live_reload_global_]();
    window[_live_reload_global_] = null;
  }

  const es = new EventSource(url);
  window[_live_reload_global_] = () => {
    es.close();
    if (opts.on_shutdown) {
      opts.on_shutdown();
    }
  };

  es.onopen = function (err) {
    console.warn('Live reload ready');
  };
  es.onerror = function (err) {
    console.warn('Live reload NOT ready');
  };

  es.onmessage = function (evt) {
    try {
      opts.on_update(JSON.parse(evt.data));
    } catch (err) {
      return console.error(err);
    }
  };
  return es;
}

function reloadDataLiveElements(live, rootDoc = window.document) {
  for (const el of rootDoc.querySelectorAll('[data-live]')) {
    const [attr, change_key] = el.dataset['live'].split(' ');
    const value = live[change_key];
    if (!value || (el[attr] || '').endsWith(value)) {
      continue; // unchanged
    }replaceElement(el, { [attr]: value });
  }
}

function replaceElement(element, changes) {
  const el = element.ownerDocument.createElement(element.nodeName);
  for (const a of element.attributes) {
    el.setAttribute(a.name, changes[a.name] || a.value);
  }

  element.parentNode.replaceChild(el, element);
  return el;
}

function connectReloadEventSourceWithReact(opts) {
  if (null == opts) {
    opts = {};
  }

  opts.show_errors = errorList => {
    ErrorOverlay.reportBuildError(errorList[0]);
  };

  const { on_shutdown } = opts;
  opts.on_shutdown = () => {
    try {
      ErrorOverlay.stopReportingRuntimeErrors();
    } catch (err) {// ignore...
    }if (on_shutdown) {
      on_shutdown();
    }
  };

  ErrorOverlay.startReportingRuntimeErrors({});
  connectReloadEventSource$1(opts);
  return ErrorOverlay;
}

export default connectReloadEventSourceWithReact;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QtbGl2ZS1sb2FkZXIubWpzIiwic291cmNlcyI6WyIuLi9jb2RlL2xpdmUtbG9hZGVyLmpzeSIsIi4uL2NvZGUvcmVhY3QtbGl2ZS1sb2FkZXIuanN5Il0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdFJlbG9hZEV2ZW50U291cmNlXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFJlbG9hZEV2ZW50U291cmNlKG9wdHMpIDo6XG4gIGlmIG51bGwgPT0gb3B0cyA6OiBvcHRzID0ge31cbiAgZWxzZSBpZiAnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0cyA6OlxuICAgIG9wdHMgPSBAe30gb25fdXBkYXRlOiBvcHRzXG5cbiAgY29uc3QgdXJsID0gb3B0cy51cmwgfHwgJ19fbGl2ZV9fJ1xuXG4gIGlmIG51bGwgPT0gb3B0cy5zaG93X2Vycm9ycyA6OlxuICAgIG9wdHMuc2hvd19lcnJvcnMgPSBmdW5jdGlvbihlcnJvckxpc3QpIDo6XG4gICAgICBmb3IgY29uc3QgZXJyX21zZyBvZiBlcnJvckxpc3QgOjpcbiAgICAgICAgY29uc29sZS5lcnJvciBAIGVycl9tc2dcblxuICBpZiBudWxsID09IG9wdHMub25fdXBkYXRlIDo6XG4gICAgY29uc3QgdWlkID0gRGF0ZS5ub3coKS50b1N0cmluZygzNilcbiAgICBvcHRzLm9uX3VwZGF0ZSA9IGZ1bmN0aW9uICh7bGl2ZSwgZXJyb3JzfSkgOjpcbiAgICAgIGlmIGVycm9ycyAmJiBlcnJvcnMubGVuZ3RoIDo6XG4gICAgICAgIGNvbnNvbGUud2FybiBAIGBMaXZlIHJlbG9hZCAoJHt1aWR9KSB3aXRoIGVycm9yc2BcbiAgICAgIGVsc2UgY29uc29sZS53YXJuIEAgYExpdmUgcmVsb2FkICgke3VpZH0pIHN1Y2Nlc3NgXG5cbiAgICAgIG9wdHMuc2hvd19lcnJvcnMoZXJyb3JzIHx8IFtdKVxuICAgICAgcmVsb2FkRGF0YUxpdmVFbGVtZW50cyhsaXZlLCB3aW5kb3cuZG9jdW1lbnQpXG5cblxuICBjb25zdCBfbGl2ZV9yZWxvYWRfZ2xvYmFsXyA9IGBAQGxpdmUtcmVsb2FkICR7dXJsfWBcbiAgaWYgbnVsbCAhPSB3aW5kb3dbX2xpdmVfcmVsb2FkX2dsb2JhbF9dIDo6XG4gICAgd2luZG93W19saXZlX3JlbG9hZF9nbG9iYWxfXSgpXG4gICAgd2luZG93W19saXZlX3JlbG9hZF9nbG9iYWxfXSA9IG51bGxcblxuICBjb25zdCBlcyA9IG5ldyBFdmVudFNvdXJjZSh1cmwpXG4gIHdpbmRvd1tfbGl2ZV9yZWxvYWRfZ2xvYmFsX10gPSAoKSA9PiA6OlxuICAgIGVzLmNsb3NlKClcbiAgICBpZiBvcHRzLm9uX3NodXRkb3duIDo6XG4gICAgICBvcHRzLm9uX3NodXRkb3duKClcblxuXG4gIGVzLm9ub3BlbiA9IGZ1bmN0aW9uIChlcnIpIDo6IGNvbnNvbGUud2FybiBAICdMaXZlIHJlbG9hZCByZWFkeSdcbiAgZXMub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIDo6IGNvbnNvbGUud2FybiBAICdMaXZlIHJlbG9hZCBOT1QgcmVhZHknXG5cbiAgZXMub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2dCkgOjpcbiAgICB0cnkgOjpcbiAgICAgIG9wdHMub25fdXBkYXRlIEAgSlNPTi5wYXJzZSBAIGV2dC5kYXRhXG4gICAgY2F0Y2ggZXJyIDo6XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpXG4gIHJldHVybiBlc1xuXG5leHBvcnQgZnVuY3Rpb24gcmVsb2FkRGF0YUxpdmVFbGVtZW50cyhsaXZlLCByb290RG9jPXdpbmRvdy5kb2N1bWVudCkgOjpcbiAgZm9yIGNvbnN0IGVsIG9mIHJvb3REb2MucXVlcnlTZWxlY3RvckFsbCBAICdbZGF0YS1saXZlXScgOjpcbiAgICBjb25zdCBbYXR0ciwgY2hhbmdlX2tleV0gPSBlbC5kYXRhc2V0WydsaXZlJ10uc3BsaXQoJyAnKVxuICAgIGNvbnN0IHZhbHVlID0gbGl2ZVtjaGFuZ2Vfa2V5XVxuICAgIGlmICEgdmFsdWUgfHwgKGVsW2F0dHJdIHx8ICcnKS5lbmRzV2l0aCh2YWx1ZSkgOjpcbiAgICAgIGNvbnRpbnVlIC8vIHVuY2hhbmdlZFxuXG4gICAgcmVwbGFjZUVsZW1lbnQgQCBlbCwge1thdHRyXTogdmFsdWV9XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlRWxlbWVudChlbGVtZW50LCBjaGFuZ2VzKSA6OlxuICBjb25zdCBlbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQubm9kZU5hbWUpXG4gIGZvciBjb25zdCBhIG9mIGVsZW1lbnQuYXR0cmlidXRlcyA6OlxuICAgIGVsLnNldEF0dHJpYnV0ZSBAIGEubmFtZSwgY2hhbmdlc1thLm5hbWVdIHx8IGEudmFsdWVcblxuICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGVsLCBlbGVtZW50KVxuICByZXR1cm4gZWxcblxuIiwiaW1wb3J0IEVycm9yT3ZlcmxheSBmcm9tICdyZWFjdC1lcnJvci1vdmVybGF5J1xuaW1wb3J0IGNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZSBmcm9tICcuL2xpdmUtbG9hZGVyLmpzeSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdFJlbG9hZEV2ZW50U291cmNlV2l0aFJlYWN0KG9wdHMpIDo6XG4gIGlmIG51bGwgPT0gb3B0cyA6OiBvcHRzID0ge31cblxuICBvcHRzLnNob3dfZXJyb3JzID0gZXJyb3JMaXN0ID0+IDo6XG4gICAgRXJyb3JPdmVybGF5LnJlcG9ydEJ1aWxkRXJyb3IgQCBlcnJvckxpc3RbMF1cblxuICBjb25zdCB7b25fc2h1dGRvd259ID0gb3B0c1xuICBvcHRzLm9uX3NodXRkb3duID0gKCkgPT4gOjpcbiAgICB0cnkgOjogRXJyb3JPdmVybGF5LnN0b3BSZXBvcnRpbmdSdW50aW1lRXJyb3JzKClcbiAgICBjYXRjaCBlcnIgOjogLy8gaWdub3JlLi4uXG5cbiAgICBpZiBvbl9zaHV0ZG93biA6OiBvbl9zaHV0ZG93bigpXG4gICAgXG4gIEVycm9yT3ZlcmxheS5zdGFydFJlcG9ydGluZ1J1bnRpbWVFcnJvcnMoe30pXG4gIGNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZShvcHRzKVxuICByZXR1cm4gRXJyb3JPdmVybGF5XG5cbiJdLCJuYW1lcyI6WyJjb25uZWN0UmVsb2FkRXZlbnRTb3VyY2UiLCJvcHRzIiwib25fdXBkYXRlIiwidXJsIiwic2hvd19lcnJvcnMiLCJlcnJvckxpc3QiLCJlcnJfbXNnIiwiZXJyb3IiLCJ1aWQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJsaXZlIiwiZXJyb3JzIiwibGVuZ3RoIiwid2FybiIsImNvbnNvbGUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIl9saXZlX3JlbG9hZF9nbG9iYWxfIiwiZXMiLCJFdmVudFNvdXJjZSIsImNsb3NlIiwib25fc2h1dGRvd24iLCJvbm9wZW4iLCJlcnIiLCJvbmVycm9yIiwib25tZXNzYWdlIiwiZXZ0IiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsInJlbG9hZERhdGFMaXZlRWxlbWVudHMiLCJyb290RG9jIiwiZWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXR0ciIsImNoYW5nZV9rZXkiLCJkYXRhc2V0Iiwic3BsaXQiLCJ2YWx1ZSIsImVuZHNXaXRoIiwicmVwbGFjZUVsZW1lbnQiLCJlbGVtZW50IiwiY2hhbmdlcyIsIm93bmVyRG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9kZU5hbWUiLCJhIiwiYXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZSIsIm5hbWUiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiY29ubmVjdFJlbG9hZEV2ZW50U291cmNlV2l0aFJlYWN0IiwicmVwb3J0QnVpbGRFcnJvciIsInN0b3BSZXBvcnRpbmdSdW50aW1lRXJyb3JzIiwic3RhcnRSZXBvcnRpbmdSdW50aW1lRXJyb3JzIiwiRXJyb3JPdmVybGF5Il0sIm1hcHBpbmdzIjoiOztBQUVPLFNBQVNBLDBCQUFULENBQWtDQyxJQUFsQyxFQUF3QztNQUMxQyxRQUFRQSxJQUFYLEVBQWtCO1dBQVEsRUFBUDtHQUFu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
