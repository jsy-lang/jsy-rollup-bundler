function connectReloadEventSource$1(url = '__live__', update) {
  if (null == update) {
    const uid = Date.now().toString(36);
    update = function (live_changes) {
      console.log(`Live reload (${uid})`);
      reloadDataLiveElements(live_changes, document);
    };
  }

  const _global_key_ = `@@live-reload ${url}`;
  if (null != window[_global_key_]) {
    window[_global_key_].close();
    window[_global_key_] = null;
  }

  const es = new EventSource(url);
  window[_global_key_] = es;

  es.onerror = function (err) {
    console.warn('Problem with live reload:', err);
  };

  es.onmessage = function (evt) {
    try {
      var live_changes = JSON.parse(evt.data);
      update(live_changes);
    } catch (err) {
      return console.error(err);
    }
  };
  return es;
}

function reloadDataLiveElements(live_changes, rootDoc = document) {
  for (const el of rootDoc.querySelectorAll('[data-live]')) {
    const [attr, change_key] = el.dataset['live'].split(' ');
    const value = live_changes[change_key];
    if (!value || (el[attr] || '').endsWith(value)) {
      continue; // unchanged
    }replaceElement(el, { [attr]: value });
  }
}

function replaceElement(element, changes) {
  const el = element.ownerDocument.createElement(element.nodeName);
  for (const a of element.attributes) {
    el.setAttribute(a.name, changes[a.name] || a.value);
  }

  element.parentNode.replaceChild(el, element);
  return el;
}

export { connectReloadEventSource$1 as connectReloadEventSource, reloadDataLiveElements, replaceElement };
export default connectReloadEventSource$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1sb2FkZXIubWpzIiwic291cmNlcyI6WyIuLi9jb2RlL2xpdmUtbG9hZGVyLmpzeSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZVxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZSh1cmw9J19fbGl2ZV9fJywgdXBkYXRlKSA6OlxuICBpZiBudWxsID09IHVwZGF0ZSA6OlxuICAgIGNvbnN0IHVpZCA9IERhdGUubm93KCkudG9TdHJpbmcoMzYpXG4gICAgdXBkYXRlID0gZnVuY3Rpb24gKGxpdmVfY2hhbmdlcykgOjpcbiAgICAgIGNvbnNvbGUubG9nIEAgYExpdmUgcmVsb2FkICgke3VpZH0pYFxuICAgICAgcmVsb2FkRGF0YUxpdmVFbGVtZW50cyhsaXZlX2NoYW5nZXMsIGRvY3VtZW50KVxuXG4gIGNvbnN0IF9nbG9iYWxfa2V5XyA9IGBAQGxpdmUtcmVsb2FkICR7dXJsfWBcbiAgaWYgbnVsbCAhPSB3aW5kb3dbX2dsb2JhbF9rZXlfXSA6OlxuICAgIHdpbmRvd1tfZ2xvYmFsX2tleV9dLmNsb3NlKClcbiAgICB3aW5kb3dbX2dsb2JhbF9rZXlfXSA9IG51bGxcblxuICBjb25zdCBlcyA9IG5ldyBFdmVudFNvdXJjZSh1cmwpXG4gIHdpbmRvd1tfZ2xvYmFsX2tleV9dID0gZXNcblxuICBlcy5vbmVycm9yID0gZnVuY3Rpb24gKGVycikgOjpcbiAgICBjb25zb2xlLndhcm4gQCAnUHJvYmxlbSB3aXRoIGxpdmUgcmVsb2FkOicsIGVyclxuXG4gIGVzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldnQpIDo6XG4gICAgdHJ5IDo6XG4gICAgICB2YXIgbGl2ZV9jaGFuZ2VzID0gSlNPTi5wYXJzZSBAIGV2dC5kYXRhXG4gICAgICB1cGRhdGUobGl2ZV9jaGFuZ2VzKVxuICAgIGNhdGNoIGVyciA6OlxuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKVxuICByZXR1cm4gZXNcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbG9hZERhdGFMaXZlRWxlbWVudHMobGl2ZV9jaGFuZ2VzLCByb290RG9jPWRvY3VtZW50KSA6OlxuICBmb3IgY29uc3QgZWwgb2Ygcm9vdERvYy5xdWVyeVNlbGVjdG9yQWxsIEAgJ1tkYXRhLWxpdmVdJyA6OlxuICAgIGNvbnN0IFthdHRyLCBjaGFuZ2Vfa2V5XSA9IGVsLmRhdGFzZXRbJ2xpdmUnXS5zcGxpdCgnICcpXG4gICAgY29uc3QgdmFsdWUgPSBsaXZlX2NoYW5nZXNbY2hhbmdlX2tleV1cbiAgICBpZiAhIHZhbHVlIHx8IChlbFthdHRyXSB8fCAnJykuZW5kc1dpdGgodmFsdWUpIDo6XG4gICAgICBjb250aW51ZSAvLyB1bmNoYW5nZWRcblxuICAgIHJlcGxhY2VFbGVtZW50IEAgZWwsIHtbYXR0cl06IHZhbHVlfVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnQoZWxlbWVudCwgY2hhbmdlcykgOjpcbiAgY29uc3QgZWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50Lm5vZGVOYW1lKVxuICBmb3IgY29uc3QgYSBvZiBlbGVtZW50LmF0dHJpYnV0ZXMgOjpcbiAgICBlbC5zZXRBdHRyaWJ1dGUgQCBhLm5hbWUsIGNoYW5nZXNbYS5uYW1lXSB8fCBhLnZhbHVlXG5cbiAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChlbCwgZWxlbWVudClcbiAgcmV0dXJuIGVsXG5cbiJdLCJuYW1lcyI6WyJjb25uZWN0UmVsb2FkRXZlbnRTb3VyY2UiLCJ1cmwiLCJ1cGRhdGUiLCJ1aWQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJsaXZlX2NoYW5nZXMiLCJsb2ciLCJkb2N1bWVudCIsIl9nbG9iYWxfa2V5XyIsIndpbmRvdyIsImNsb3NlIiwiZXMiLCJFdmVudFNvdXJjZSIsIm9uZXJyb3IiLCJlcnIiLCJ3YXJuIiwib25tZXNzYWdlIiwiZXZ0IiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsImNvbnNvbGUiLCJlcnJvciIsInJlbG9hZERhdGFMaXZlRWxlbWVudHMiLCJyb290RG9jIiwiZWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXR0ciIsImNoYW5nZV9rZXkiLCJkYXRhc2V0Iiwic3BsaXQiLCJ2YWx1ZSIsImVuZHNXaXRoIiwicmVwbGFjZUVsZW1lbnQiLCJlbGVtZW50IiwiY2hhbmdlcyIsIm93bmVyRG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9kZU5hbWUiLCJhIiwiYXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZSIsIm5hbWUiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIl0sIm1hcHBpbmdzIjoiQUFFTyxTQUFTQSwwQkFBVCxDQUFrQ0MsTUFBSSxVQUF0QyxFQUFrREMsTUFBbEQsRUFBMEQ7TUFDNUQsUUFBUUEsTUFBWCxFQUFvQjtVQUNaQyxNQUFNQyxLQUFLQyxHQUFMLEdBQVdDLFFBQVgsQ0FBb0IsRUFBcEIsQ0FBWjthQUNTLFVBQVVDLFlBQVYsRUFBd0I7Y0FDdkJDLEdBQVIsQ0FBZSxnQkFBZUwsR0FBSSxHQUFsQzs2QkFDdUJJLFlBQXZCLEVBQXFDRSxRQUFyQztLQUZGOzs7UUFJSUMsZUFBZ0IsaUJBQWdCVCxHQUFJLEVBQTFDO01BQ0csUUFBUVUsT0FBT0QsWUFBUCxDQUFYLEVBQWtDO1dBQ3pCQSxZQUFQLEVBQXFCRSxLQUFyQjtXQUNPRixZQUFQLElBQXVCLElBQXZCOzs7UUFFSUcsS0FBSyxJQUFJQyxXQUFKLENBQWdCYixHQUFoQixDQUFYO1NBQ09TLFlBQVAsSUFBdUJHLEVBQXZCOztLQUVHRSxPQUFILEdBQWEsVUFBVUMsR0FBVixFQUFlO1lBQ2xCQyxJQUFSLENBQWUsMkJBQWYsRUFBNENELEdBQTVDO0dBREY7O0tBR0dFLFNBQUgsR0FBZSxVQUFVQyxHQUFWLEVBQWU7UUFDeEI7VUFDRVosZUFBZWEsS0FBS0MsS0FBTCxDQUFhRixJQUFJRyxJQUFqQixDQUFuQjthQUNPZixZQUFQO0tBRkYsQ0FHQSxPQUFNUyxHQUFOLEVBQVk7YUFDSE8sUUFBUUMsS0FBUixDQUFjUixHQUFkLENBQVA7O0dBTEo7U0FNT0gsRUFBUDs7O0FBRUYsQUFBTyxTQUFTWSxzQkFBVCxDQUFnQ2xCLFlBQWhDLEVBQThDbUIsVUFBUWpCLFFBQXRELEVBQWdFO09BQ2pFLE1BQU1rQixFQUFWLElBQWdCRCxRQUFRRSxnQkFBUixDQUEyQixhQUEzQixDQUFoQixFQUEyRDtVQUNuRCxDQUFDQyxJQUFELEVBQU9DLFVBQVAsSUFBcUJILEdBQUdJLE9BQUgsQ0FBVyxNQUFYLEVBQW1CQyxLQUFuQixDQUF5QixHQUF6QixDQUEzQjtVQUNNQyxRQUFRMUIsYUFBYXVCLFVBQWIsQ0FBZDtRQUNHLENBQUVHLEtBQUYsSUFBVyxDQUFDTixHQUFHRSxJQUFILEtBQVksRUFBYixFQUFpQkssUUFBakIsQ0FBMEJELEtBQTFCLENBQWQsRUFBaUQ7ZUFBQTtLQUdqREUsZUFBaUJSLEVBQWpCLEVBQXFCLEVBQUMsQ0FBQ0UsSUFBRCxHQUFRSSxLQUFULEVBQXJCOzs7O0FBRUosQUFBTyxTQUFTRSxjQUFULENBQXdCQyxPQUF4QixFQUFpQ0MsT0FBakMsRUFBMEM7UUFDekNWLEtBQUtTLFFBQVFFLGFBQVIsQ0FBc0JDLGFBQXRCLENBQW9DSCxRQUFRSSxRQUE1QyxDQUFYO09BQ0ksTUFBTUMsQ0FBVixJQUFlTCxRQUFRTSxVQUF2QixFQUFvQztPQUMvQkMsWUFBSCxDQUFrQkYsRUFBRUcsSUFBcEIsRUFBMEJQLFFBQVFJLEVBQUVHLElBQVYsS0FBbUJILEVBQUVSLEtBQS9DOzs7VUFFTVksVUFBUixDQUFtQkMsWUFBbkIsQ0FBZ0NuQixFQUFoQyxFQUFvQ1MsT0FBcEM7U0FDT1QsRUFBUDs7Ozs7OyJ9
