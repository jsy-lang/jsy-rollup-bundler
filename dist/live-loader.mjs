function connectReloadEventSource$1(eventSourceUrl = '__live__', update) {
  if (null == update) {
    const uid = Date.now().toString(36);
    update = function (live_changes) {
      console.log(`Live load (${uid})`);
      reloadDataLiveElements(live_changes, document);
    };
  }

  const _global_key_ = `@@live-reload ${eventSourceUrl}`;
  if (null != window[_global_key_]) {
    window[_global_key_].close();
    window[_global_key_] = null;
  }

  const es = new EventSource(eventSourceUrl);
  window[_global_key_] = es;

  es.onmessage = function (evt) {
    try {
      var live_changes = JSON.parse(evt.data);
    } catch (err) {
      console.error('Error during parsing of live changes:', err);
      return;
    }

    update(live_changes);
  };
  return es;
}

function reloadDataLiveElements(live_changes, rootDoc = document) {
  for (const el of rootDoc.querySelectorAll('[data-live]')) {
    const [attr, change_key] = el.dataset['live'].split(' ');
    const value = live_changes[change_key];
    if (!value) {
      continue;
    }

    const unchanged = (el[attr] || '').endsWith(value);
    if (unchanged) {
      continue;
    }

    const changes = { [attr]: value };
    const el_next = replaceElement(el, changes);
  }
}

function replaceElement(element, updates) {
  const el = element.ownerDocument.createElement(element.nodeName);
  for (const a of element.attributes) {
    el.setAttribute(a.name, updates[a.name] || a.value);
  }

  element.parentNode.replaceChild(el, element);
  return el;
}

export { connectReloadEventSource$1 as connectReloadEventSource, reloadDataLiveElements, replaceElement };
export default connectReloadEventSource$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1sb2FkZXIubWpzIiwic291cmNlcyI6WyIuLi9jb2RlL2xpdmUtbG9hZGVyLmpzeSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZVxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZShldmVudFNvdXJjZVVybD0nX19saXZlX18nLCB1cGRhdGUpIDo6XG4gIGlmIG51bGwgPT0gdXBkYXRlIDo6XG4gICAgY29uc3QgdWlkID0gRGF0ZS5ub3coKS50b1N0cmluZygzNilcbiAgICB1cGRhdGUgPSBmdW5jdGlvbiAobGl2ZV9jaGFuZ2VzKSA6OlxuICAgICAgY29uc29sZS5sb2cgQCBgTGl2ZSBsb2FkICgke3VpZH0pYFxuICAgICAgcmVsb2FkRGF0YUxpdmVFbGVtZW50cyhsaXZlX2NoYW5nZXMsIGRvY3VtZW50KVxuXG4gIGNvbnN0IF9nbG9iYWxfa2V5XyA9IGBAQGxpdmUtcmVsb2FkICR7ZXZlbnRTb3VyY2VVcmx9YFxuICBpZiBudWxsICE9IHdpbmRvd1tfZ2xvYmFsX2tleV9dIDo6XG4gICAgd2luZG93W19nbG9iYWxfa2V5X10uY2xvc2UoKVxuICAgIHdpbmRvd1tfZ2xvYmFsX2tleV9dID0gbnVsbFxuXG4gIGNvbnN0IGVzID0gbmV3IEV2ZW50U291cmNlKGV2ZW50U291cmNlVXJsKVxuICB3aW5kb3dbX2dsb2JhbF9rZXlfXSA9IGVzXG5cbiAgZXMub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2dCkgOjpcbiAgICB0cnkgOjpcbiAgICAgIHZhciBsaXZlX2NoYW5nZXMgPSBKU09OLnBhcnNlIEAgZXZ0LmRhdGFcbiAgICBjYXRjaCBlcnIgOjpcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGR1cmluZyBwYXJzaW5nIG9mIGxpdmUgY2hhbmdlczonLCBlcnIpXG4gICAgICByZXR1cm5cblxuICAgIHVwZGF0ZShsaXZlX2NoYW5nZXMpXG4gIHJldHVybiBlc1xuXG5leHBvcnQgZnVuY3Rpb24gcmVsb2FkRGF0YUxpdmVFbGVtZW50cyhsaXZlX2NoYW5nZXMsIHJvb3REb2M9ZG9jdW1lbnQpIDo6XG4gIGZvciBjb25zdCBlbCBvZiByb290RG9jLnF1ZXJ5U2VsZWN0b3JBbGwgQCAnW2RhdGEtbGl2ZV0nIDo6XG4gICAgY29uc3QgW2F0dHIsIGNoYW5nZV9rZXldID0gZWwuZGF0YXNldFsnbGl2ZSddLnNwbGl0KCcgJylcbiAgICBjb25zdCB2YWx1ZSA9IGxpdmVfY2hhbmdlc1tjaGFuZ2Vfa2V5XVxuICAgIGlmICEgdmFsdWUgOjogY29udGludWVcblxuICAgIGNvbnN0IHVuY2hhbmdlZCA9IChlbFthdHRyXSB8fCAnJykuZW5kc1dpdGgodmFsdWUpXG4gICAgaWYgdW5jaGFuZ2VkIDo6IGNvbnRpbnVlXG5cbiAgICBjb25zdCBjaGFuZ2VzID0gQDogW2F0dHJdOiB2YWx1ZVxuICAgIGNvbnN0IGVsX25leHQgPSByZXBsYWNlRWxlbWVudCBAIGVsLCBjaGFuZ2VzXG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlRWxlbWVudChlbGVtZW50LCB1cGRhdGVzKSA6OlxuICBjb25zdCBlbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQubm9kZU5hbWUpXG4gIGZvciBjb25zdCBhIG9mIGVsZW1lbnQuYXR0cmlidXRlcyA6OlxuICAgIGVsLnNldEF0dHJpYnV0ZSBAIGEubmFtZSwgdXBkYXRlc1thLm5hbWVdIHx8IGEudmFsdWVcblxuICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGVsLCBlbGVtZW50KVxuICByZXR1cm4gZWxcblxuIl0sIm5hbWVzIjpbImNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZSIsImV2ZW50U291cmNlVXJsIiwidXBkYXRlIiwidWlkIiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwibGl2ZV9jaGFuZ2VzIiwibG9nIiwiZG9jdW1lbnQiLCJfZ2xvYmFsX2tleV8iLCJ3aW5kb3ciLCJjbG9zZSIsImVzIiwiRXZlbnRTb3VyY2UiLCJvbm1lc3NhZ2UiLCJldnQiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwiZXJyIiwiZXJyb3IiLCJyZWxvYWREYXRhTGl2ZUVsZW1lbnRzIiwicm9vdERvYyIsImVsIiwicXVlcnlTZWxlY3RvckFsbCIsImF0dHIiLCJjaGFuZ2Vfa2V5IiwiZGF0YXNldCIsInNwbGl0IiwidmFsdWUiLCJ1bmNoYW5nZWQiLCJlbmRzV2l0aCIsImNoYW5nZXMiLCJlbF9uZXh0IiwicmVwbGFjZUVsZW1lbnQiLCJlbGVtZW50IiwidXBkYXRlcyIsIm93bmVyRG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9kZU5hbWUiLCJhIiwiYXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZSIsIm5hbWUiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIl0sIm1hcHBpbmdzIjoiQUFFTyxTQUFTQSwwQkFBVCxDQUFrQ0MsaUJBQWUsVUFBakQsRUFBNkRDLE1BQTdELEVBQXFFO01BQ3ZFLFFBQVFBLE1BQVgsRUFBb0I7VUFDWkMsTUFBTUMsS0FBS0MsR0FBTCxHQUFXQyxRQUFYLENBQW9CLEVBQXBCLENBQVo7YUFDUyxVQUFVQyxZQUFWLEVBQXdCO2NBQ3ZCQyxHQUFSLENBQWUsY0FBYUwsR0FBSSxHQUFoQzs2QkFDdUJJLFlBQXZCLEVBQXFDRSxRQUFyQztLQUZGOzs7UUFJSUMsZUFBZ0IsaUJBQWdCVCxjQUFlLEVBQXJEO01BQ0csUUFBUVUsT0FBT0QsWUFBUCxDQUFYLEVBQWtDO1dBQ3pCQSxZQUFQLEVBQXFCRSxLQUFyQjtXQUNPRixZQUFQLElBQXVCLElBQXZCOzs7UUFFSUcsS0FBSyxJQUFJQyxXQUFKLENBQWdCYixjQUFoQixDQUFYO1NBQ09TLFlBQVAsSUFBdUJHLEVBQXZCOztLQUVHRSxTQUFILEdBQWUsVUFBVUMsR0FBVixFQUFlO1FBQ3hCO1VBQ0VULGVBQWVVLEtBQUtDLEtBQUwsQ0FBYUYsSUFBSUcsSUFBakIsQ0FBbkI7S0FERixDQUVBLE9BQU1DLEdBQU4sRUFBWTtjQUNGQyxLQUFSLENBQWMsdUNBQWQsRUFBdURELEdBQXZEOzs7O1dBR0tiLFlBQVA7R0FQRjtTQVFPTSxFQUFQOzs7QUFFRixBQUFPLFNBQVNTLHNCQUFULENBQWdDZixZQUFoQyxFQUE4Q2dCLFVBQVFkLFFBQXRELEVBQWdFO09BQ2pFLE1BQU1lLEVBQVYsSUFBZ0JELFFBQVFFLGdCQUFSLENBQTJCLGFBQTNCLENBQWhCLEVBQTJEO1VBQ25ELENBQUNDLElBQUQsRUFBT0MsVUFBUCxJQUFxQkgsR0FBR0ksT0FBSCxDQUFXLE1BQVgsRUFBbUJDLEtBQW5CLENBQXlCLEdBQXpCLENBQTNCO1VBQ01DLFFBQVF2QixhQUFhb0IsVUFBYixDQUFkO1FBQ0csQ0FBRUcsS0FBTCxFQUFhOzs7O1VBRVBDLFlBQVksQ0FBQ1AsR0FBR0UsSUFBSCxLQUFZLEVBQWIsRUFBaUJNLFFBQWpCLENBQTBCRixLQUExQixDQUFsQjtRQUNHQyxTQUFILEVBQWU7Ozs7VUFFVEUsVUFBWSxFQUFDLENBQUNQLElBQUQsR0FBUUksS0FBVCxFQUFsQjtVQUNNSSxVQUFVQyxlQUFpQlgsRUFBakIsRUFBcUJTLE9BQXJCLENBQWhCOzs7O0FBRUosQUFBTyxTQUFTRSxjQUFULENBQXdCQyxPQUF4QixFQUFpQ0MsT0FBakMsRUFBMEM7UUFDekNiLEtBQUtZLFFBQVFFLGFBQVIsQ0FBc0JDLGFBQXRCLENBQW9DSCxRQUFRSSxRQUE1QyxDQUFYO09BQ0ksTUFBTUMsQ0FBVixJQUFlTCxRQUFRTSxVQUF2QixFQUFvQztPQUMvQkMsWUFBSCxDQUFrQkYsRUFBRUcsSUFBcEIsRUFBMEJQLFFBQVFJLEVBQUVHLElBQVYsS0FBbUJILEVBQUVYLEtBQS9DOzs7VUFFTWUsVUFBUixDQUFtQkMsWUFBbkIsQ0FBZ0N0QixFQUFoQyxFQUFvQ1ksT0FBcEM7U0FDT1osRUFBUDs7Ozs7OyJ9
