function connectReloadEventSource$1(opts) {
  if (null == opts) {
    opts = {};
  } else if ('function' === typeof opts) {
    opts = { on_update: opts };
  }

  const url = opts.url || '__live__';

  if (null == opts.show_errors) {
    opts.show_errors = function (errorList) {
      for (const err_msg of errorList) {
        console.error(err_msg);
      }
    };
  }

  if (null == opts.on_update) {
    const uid = Date.now().toString(36);
    opts.on_update = function ({ live, errors }) {
      if (errors && errors.length) {
        console.warn(`Live reload (${uid}) with errors`);
      } else console.warn(`Live reload (${uid}) success`);

      opts.show_errors(errors || []);
      reloadDataLiveElements(live, window.document);
    };
  }

  const _live_reload_global_ = `@@live-reload ${url}`;
  if (null != window[_live_reload_global_]) {
    window[_live_reload_global_]();
    window[_live_reload_global_] = null;
  }

  const es = new EventSource(url);
  window[_live_reload_global_] = () => {
    es.close();
    if (opts.on_shutdown) {
      opts.on_shutdown();
    }
  };

  es.onopen = function (err) {
    console.warn('Live reload ready');
  };
  es.onerror = function (err) {
    console.warn('Live reload NOT ready');
  };

  es.onmessage = function (evt) {
    try {
      opts.on_update(JSON.parse(evt.data));
    } catch (err) {
      return console.error(err);
    }
  };
  return es;
}

function reloadDataLiveElements(live, rootDoc = window.document) {
  for (const el of rootDoc.querySelectorAll('[data-live]')) {
    const [attr, change_key] = el.dataset['live'].split(' ');
    const value = live[change_key];
    if (!value || (el[attr] || '').endsWith(value)) {
      continue; // unchanged
    }replaceElement(el, { [attr]: value });
  }
}

function replaceElement(element, changes) {
  const el = element.ownerDocument.createElement(element.nodeName);
  for (const a of element.attributes) {
    el.setAttribute(a.name, changes[a.name] || a.value);
  }

  element.parentNode.replaceChild(el, element);
  return el;
}

export { connectReloadEventSource$1 as connectReloadEventSource, reloadDataLiveElements, replaceElement };
export default connectReloadEventSource$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1sb2FkZXIubWpzIiwic291cmNlcyI6WyIuLi9jb2RlL2xpdmUtbG9hZGVyLmpzeSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZVxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RSZWxvYWRFdmVudFNvdXJjZShvcHRzKSA6OlxuICBpZiBudWxsID09IG9wdHMgOjogb3B0cyA9IHt9XG4gIGVsc2UgaWYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIG9wdHMgOjpcbiAgICBvcHRzID0gQHt9IG9uX3VwZGF0ZTogb3B0c1xuXG4gIGNvbnN0IHVybCA9IG9wdHMudXJsIHx8ICdfX2xpdmVfXydcblxuICBpZiBudWxsID09IG9wdHMuc2hvd19lcnJvcnMgOjpcbiAgICBvcHRzLnNob3dfZXJyb3JzID0gZnVuY3Rpb24oZXJyb3JMaXN0KSA6OlxuICAgICAgZm9yIGNvbnN0IGVycl9tc2cgb2YgZXJyb3JMaXN0IDo6XG4gICAgICAgIGNvbnNvbGUuZXJyb3IgQCBlcnJfbXNnXG5cbiAgaWYgbnVsbCA9PSBvcHRzLm9uX3VwZGF0ZSA6OlxuICAgIGNvbnN0IHVpZCA9IERhdGUubm93KCkudG9TdHJpbmcoMzYpXG4gICAgb3B0cy5vbl91cGRhdGUgPSBmdW5jdGlvbiAoe2xpdmUsIGVycm9yc30pIDo6XG4gICAgICBpZiBlcnJvcnMgJiYgZXJyb3JzLmxlbmd0aCA6OlxuICAgICAgICBjb25zb2xlLndhcm4gQCBgTGl2ZSByZWxvYWQgKCR7dWlkfSkgd2l0aCBlcnJvcnNgXG4gICAgICBlbHNlIGNvbnNvbGUud2FybiBAIGBMaXZlIHJlbG9hZCAoJHt1aWR9KSBzdWNjZXNzYFxuXG4gICAgICBvcHRzLnNob3dfZXJyb3JzKGVycm9ycyB8fCBbXSlcbiAgICAgIHJlbG9hZERhdGFMaXZlRWxlbWVudHMobGl2ZSwgd2luZG93LmRvY3VtZW50KVxuXG5cbiAgY29uc3QgX2xpdmVfcmVsb2FkX2dsb2JhbF8gPSBgQEBsaXZlLXJlbG9hZCAke3VybH1gXG4gIGlmIG51bGwgIT0gd2luZG93W19saXZlX3JlbG9hZF9nbG9iYWxfXSA6OlxuICAgIHdpbmRvd1tfbGl2ZV9yZWxvYWRfZ2xvYmFsX10oKVxuICAgIHdpbmRvd1tfbGl2ZV9yZWxvYWRfZ2xvYmFsX10gPSBudWxsXG5cbiAgY29uc3QgZXMgPSBuZXcgRXZlbnRTb3VyY2UodXJsKVxuICB3aW5kb3dbX2xpdmVfcmVsb2FkX2dsb2JhbF9dID0gKCkgPT4gOjpcbiAgICBlcy5jbG9zZSgpXG4gICAgaWYgb3B0cy5vbl9zaHV0ZG93biA6OlxuICAgICAgb3B0cy5vbl9zaHV0ZG93bigpXG5cblxuICBlcy5vbm9wZW4gPSBmdW5jdGlvbiAoZXJyKSA6OiBjb25zb2xlLndhcm4gQCAnTGl2ZSByZWxvYWQgcmVhZHknXG4gIGVzLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSA6OiBjb25zb2xlLndhcm4gQCAnTGl2ZSByZWxvYWQgTk9UIHJlYWR5J1xuXG4gIGVzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldnQpIDo6XG4gICAgdHJ5IDo6XG4gICAgICBvcHRzLm9uX3VwZGF0ZSBAIEpTT04ucGFyc2UgQCBldnQuZGF0YVxuICAgIGNhdGNoIGVyciA6OlxuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKVxuICByZXR1cm4gZXNcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbG9hZERhdGFMaXZlRWxlbWVudHMobGl2ZSwgcm9vdERvYz13aW5kb3cuZG9jdW1lbnQpIDo6XG4gIGZvciBjb25zdCBlbCBvZiByb290RG9jLnF1ZXJ5U2VsZWN0b3JBbGwgQCAnW2RhdGEtbGl2ZV0nIDo6XG4gICAgY29uc3QgW2F0dHIsIGNoYW5nZV9rZXldID0gZWwuZGF0YXNldFsnbGl2ZSddLnNwbGl0KCcgJylcbiAgICBjb25zdCB2YWx1ZSA9IGxpdmVbY2hhbmdlX2tleV1cbiAgICBpZiAhIHZhbHVlIHx8IChlbFthdHRyXSB8fCAnJykuZW5kc1dpdGgodmFsdWUpIDo6XG4gICAgICBjb250aW51ZSAvLyB1bmNoYW5nZWRcblxuICAgIHJlcGxhY2VFbGVtZW50IEAgZWwsIHtbYXR0cl06IHZhbHVlfVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnQoZWxlbWVudCwgY2hhbmdlcykgOjpcbiAgY29uc3QgZWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50Lm5vZGVOYW1lKVxuICBmb3IgY29uc3QgYSBvZiBlbGVtZW50LmF0dHJpYnV0ZXMgOjpcbiAgICBlbC5zZXRBdHRyaWJ1dGUgQCBhLm5hbWUsIGNoYW5nZXNbYS5uYW1lXSB8fCBhLnZhbHVlXG5cbiAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChlbCwgZWxlbWVudClcbiAgcmV0dXJuIGVsXG5cbiJdLCJuYW1lcyI6WyJjb25uZWN0UmVsb2FkRXZlbnRTb3VyY2UiLCJvcHRzIiwib25fdXBkYXRlIiwidXJsIiwic2hvd19lcnJvcnMiLCJlcnJvckxpc3QiLCJlcnJfbXNnIiwiZXJyb3IiLCJ1aWQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJsaXZlIiwiZXJyb3JzIiwibGVuZ3RoIiwid2FybiIsImNvbnNvbGUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIl9saXZlX3JlbG9hZF9nbG9iYWxfIiwiZXMiLCJFdmVudFNvdXJjZSIsImNsb3NlIiwib25fc2h1dGRvd24iLCJvbm9wZW4iLCJlcnIiLCJvbmVycm9yIiwib25tZXNzYWdlIiwiZXZ0IiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsInJlbG9hZERhdGFMaXZlRWxlbWVudHMiLCJyb290RG9jIiwiZWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXR0ciIsImNoYW5nZV9rZXkiLCJkYXRhc2V0Iiwic3BsaXQiLCJ2YWx1ZSIsImVuZHNXaXRoIiwicmVwbGFjZUVsZW1lbnQiLCJlbGVtZW50IiwiY2hhbmdlcyIsIm93bmVyRG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9kZU5hbWUiLCJhIiwiYXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZSIsIm5hbWUiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIl0sIm1hcHBpbmdzIjoiQUFFTyxTQUFTQSwwQkFBVCxDQUFrQ0MsSUFBbEMsRUFBd0M7TUFDMUMsUUFBUUEsSUFBWCxFQUFrQjtXQUFRLEVBQVA7R0FBbkIsTUFDSyxJQUFHLGVBQWUsT0FBT0EsSUFBekIsRUFBZ0M7V0FDNUIsRUFBSUMsV0FBV0QsSUFBZixFQUFQOzs7UUFFSUUsTUFBTUYsS0FBS0UsR0FBTCxJQUFZLFVBQXhCOztNQUVHLFFBQVFGLEtBQUtHLFdBQWhCLEVBQThCO1NBQ3ZCQSxXQUFMLEdBQW1CLFVBQVNDLFNBQVQsRUFBb0I7V0FDakMsTUFBTUMsT0FBVixJQUFxQkQsU0FBckIsRUFBaUM7Z0JBQ3ZCRSxLQUFSLENBQWdCRCxPQUFoQjs7S0FGSjs7O01BSUMsUUFBUUwsS0FBS0MsU0FBaEIsRUFBNEI7VUFDcEJNLE1BQU1DLEtBQUtDLEdBQUwsR0FBV0MsUUFBWCxDQUFvQixFQUFwQixDQUFaO1NBQ0tULFNBQUwsR0FBaUIsVUFBVSxFQUFDVSxJQUFELEVBQU9DLE1BQVAsRUFBVixFQUEwQjtVQUN0Q0EsVUFBVUEsT0FBT0MsTUFBcEIsRUFBNkI7Z0JBQ25CQyxJQUFSLENBQWdCLGdCQUFlUCxHQUFJLGVBQW5DO09BREYsTUFFS1EsUUFBUUQsSUFBUixDQUFnQixnQkFBZVAsR0FBSSxXQUFuQzs7V0FFQUosV0FBTCxDQUFpQlMsVUFBVSxFQUEzQjs2QkFDdUJELElBQXZCLEVBQTZCSyxPQUFPQyxRQUFwQztLQU5GOzs7UUFTSUMsdUJBQXdCLGlCQUFnQmhCLEdBQUksRUFBbEQ7TUFDRyxRQUFRYyxPQUFPRSxvQkFBUCxDQUFYLEVBQTBDO1dBQ2pDQSxvQkFBUDtXQUNPQSxvQkFBUCxJQUErQixJQUEvQjs7O1FBRUlDLEtBQUssSUFBSUMsV0FBSixDQUFnQmxCLEdBQWhCLENBQVg7U0FDT2dCLG9CQUFQLElBQStCLE1BQU07T0FDaENHLEtBQUg7UUFDR3JCLEtBQUtzQixXQUFSLEVBQXNCO1dBQ2ZBLFdBQUw7O0dBSEo7O0tBTUdDLE1BQUgsR0FBWSxVQUFVQyxHQUFWLEVBQWU7WUFBV1YsSUFBUixDQUFlLG1CQUFmO0dBQTlCO0tBQ0dXLE9BQUgsR0FBYSxVQUFVRCxHQUFWLEVBQWU7WUFBV1YsSUFBUixDQUFlLHVCQUFmO0dBQS9COztLQUVHWSxTQUFILEdBQWUsVUFBVUMsR0FBVixFQUFlO1FBQ3hCO1dBQ0cxQixTQUFMLENBQWlCMkIsS0FBS0MsS0FBTCxDQUFhRixJQUFJRyxJQUFqQixDQUFqQjtLQURGLENBRUEsT0FBTU4sR0FBTixFQUFZO2FBQ0hULFFBQVFULEtBQVIsQ0FBY2tCLEdBQWQsQ0FBUDs7R0FKSjtTQUtPTCxFQUFQOzs7QUFFRixBQUFPLFNBQVNZLHNCQUFULENBQWdDcEIsSUFBaEMsRUFBc0NxQixVQUFRaEIsT0FBT0MsUUFBckQsRUFBK0Q7T0FDaEUsTUFBTWdCLEVBQVYsSUFBZ0JELFFBQVFFLGdCQUFSLENBQTJCLGFBQTNCLENBQWhCLEVBQTJEO1VBQ25ELENBQUNDLElBQUQsRUFBT0MsVUFBUCxJQUFxQkgsR0FBR0ksT0FBSCxDQUFXLE1BQVgsRUFBbUJDLEtBQW5CLENBQXlCLEdBQXpCLENBQTNCO1VBQ01DLFFBQVE1QixLQUFLeUIsVUFBTCxDQUFkO1FBQ0csQ0FBRUcsS0FBRixJQUFXLENBQUNOLEdBQUdFLElBQUgsS0FBWSxFQUFiLEVBQWlCSyxRQUFqQixDQUEwQkQsS0FBMUIsQ0FBZCxFQUFpRDtlQUFBO0tBR2pERSxlQUFpQlIsRUFBakIsRUFBcUIsRUFBQyxDQUFDRSxJQUFELEdBQVFJLEtBQVQsRUFBckI7Ozs7QUFFSixBQUFPLFNBQVNFLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQWlDQyxPQUFqQyxFQUEwQztRQUN6Q1YsS0FBS1MsUUFBUUUsYUFBUixDQUFzQkMsYUFBdEIsQ0FBb0NILFFBQVFJLFFBQTVDLENBQVg7T0FDSSxNQUFNQyxDQUFWLElBQWVMLFFBQVFNLFVBQXZCLEVBQW9DO09BQy9CQyxZQUFILENBQWtCRixFQUFFRyxJQUFwQixFQUEwQlAsUUFBUUksRUFBRUcsSUFBVixLQUFtQkgsRUFBRVIsS0FBL0M7OztVQUVNWSxVQUFSLENBQW1CQyxZQUFuQixDQUFnQ25CLEVBQWhDLEVBQW9DUyxPQUFwQztTQUNPVCxFQUFQOzs7Ozs7In0=
