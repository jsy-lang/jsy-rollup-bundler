import {inspect, promisify} from 'util'
import {writeFile} from 'fs'
import {parse as path_parse} from 'path'
import {execSync} from 'child_process'
import {rollup} from 'rollup'
import chokidar from 'chokidar'
import rpi_babel from 'rollup-plugin-babel'

const writeFile_p = promisify(writeFile)

export function jsy_plugin(kwargs) ::
  const jsy_preset = @[] 'jsy/lean', @{} no_stage_3: true, modules: false
  const presets = [jsy_preset].concat @ kwargs.presets || []

  kwargs = Object.assign @
    @{} exclude: 'node_modules/**', babelrc: false, highlightCode: true
    kwargs
    @{} presets

  return rpi_babel(kwargs)


export function bundle({source, opt, globalModules, externals, plugins, format, amd}) ::
  if 'string' !== typeof source :: throw new TypeError @ `Expected string source parameter`
  if null == opt :: throw new TypeError @ `Expected valid "opt" object parameter`
  opt = Object.create @ opt // Don't modify the underlying object
  if null == globalModules :: globalModules = opt.globalModules || {}
  if null == externals :: externals = opt.externals || []
  if null == plugins :: plugins = opt.plugins || []
  if null == format :: format = opt.format || 'iife'
  if null == opt.suffix :: opt.suffix = opt.production ? '.min' : ''
  if null == opt.outdir :: opt.outdir = './dist/public'
  if null == opt.source :: opt.source = path_parse @ source

  if 'function' !== typeof globalModules ::
    const l_globalModules = globalModules
    globalModules = module => l_globalModules[module]

  externals = new Set @ externals
  const input = Object.assign @
    @{} input: source, plugins,
        external: module =>
          !! globalModules(module)
          || externals.has(module)

    opt.input_options

  if amd :: format = 'amd'

  const output = Object.assign @
    @{} format
        name: opt.source.name
        file: `${opt.outdir}/${opt.source.name}${opt.suffix}.js`
        sourcemap: opt.sourcemap
        globals: globalModules

    opt.output_options

  if amd :: output.amd = amd

  return (opt.buildClosure || asRollupBuildClosure) @:
    input, output, opt


export function formatBuildError(err, join) ::
  const {loc, frame, codeFrame} = err
  if ! @ loc || frame || codeFrame :: return

  const colors = /\[\d+m/.test @ (frame||codeFrame||'')
  const hl = v => inspect @ v, @{} colors

  const lines = []
  let msg = err.message
  if err.id ::
    // simplify output by splitting err.id to distinct line
    msg = msg.replace(`${err.id}: `, '')

  lines.push @ `BuildError: ${hl(msg)}`

  if loc :: lines.push @ `  in ${hl(loc.file)} at ${hl(loc.line)}:${hl(loc.column)}`
  if err.id :: lines.push @ `  id: ${hl(err.id)}`
  if err.code :: lines.push @ `  code: ${hl(err.code)}`

  if frame || codeFrame ::
    lines.push @ '', frame || codeFrame

  if true === join :: return lines.join('\n')
  else if join :: return lines.join(join)
  else return lines


export function asRollupBuildClosure(buildCtx) ::
  const {input, output, opt} = buildCtx
  const err_outfile = `${output.file}.error`
  let bundle
  return opt.no_timing ? build : buildWithTiming

  async function build() ::
    try ::
      input.cache = bundle
      bundle = await rollup(input)
      await bundle.write(output)
      await writeFile_p(err_outfile, '')
      return bundle
    catch err ::
      await onBuildError(err)

  async function buildWithTiming() ::
    const log_msg = `rollup bundle "${opt.source.name}" (@${Date.now().toString(36)})`
    console.log @ `Building ${log_msg}`
    console.time @ `Built ${log_msg}`
    try ::
      input.cache = bundle
      console.time @ `Compiled ${log_msg}`
      bundle = await rollup(input)
      console.timeEnd @ `Compiled ${log_msg}`
      await bundle.write(output)
      await writeFile_p(err_outfile, '')
      return bundle
    catch err ::
      await onBuildError(err)
    finally ::
      console.timeEnd @ `Built ${log_msg}`

  async function onBuildError(err) ::
    const lines = formatBuildError @ err, true
    if opt.onBuildError ::
      return opt.onBuildError @ err, lines, buildCtx

    const err_msg = lines
      ? lines+'\n'
      : inspect(err, {colors: true})

    console.error @ '\n\n', err_msg, '\n'
    await writeFile_p @ err_outfile, err_msg,


export function buildAll(buildList) ::
  return Promise.all @ buildList.map @
    builder => builder()


export function watchAndBuild(on_restart) ::
  if on_restart && 'function' !== typeof on_restart ::
    throw new TypeError @ `Expected on_restart to be a function`

  let watchers = []
  const self = @{} rebuildOn, buildOnce, restartOn
  return self


  function restartOn(watch_glob) ::
    watchers.push @ chokidar
      .watch @ watch_glob, @{}
        ignoreInitial: true
        ignorePermissionErrors: true

      .on @ 'change', path => ::
        if ! watchers :: return
        console.log @ `Setup changed; shutting down watchers ("${path}")`
        const l_watchers = watchers
        watchers = null
        for const each of l_watchers ::
          each.close()

        if on_restart :: on_restart(path)

    return self

  function buildOnce(buildOnce, watch_glob) ::
    if Array.isArray(buildOnce) ::
      buildOnce = buildAll.bind @ null, buildOnce

    if 'function' !== typeof buildOnce ::
      throw new TypeError @ `Expected buildOnce to be a function or array`

    if watch_glob :: restartOn @ watch_glob

    buildOnce()
    return self

  function rebuildOn(rebuild, watch_glob) ::
    let inprogress = false
    if Array.isArray(rebuild) ::
      rebuild = buildAll.bind @ null, rebuild

    if 'function' !== typeof rebuild ::
      throw new TypeError @ `Expected rebuild to be a function or array`

    const rebuildWatcher = chokidar
      .watch @ watch_glob, @{}
        ignoreInitial: true
        ignorePermissionErrors: true

      .on @ 'change', _debounce

    watchers.push @ rebuildWatcher

    // invoke initial build
    _debounce()
    return self

    function _debounce(path) ::
      // debounce rapid updates
      if false === inprogress ::
        inprogress = true
        setTimeout @
          () => ::
            inprogress = false
            _do_rebuild()
          50
        .unref()
      return self

    async function _do_rebuild() ::
      let lst = await rebuild()
      if null == lst :: return

      if ! Array.isArray(lst) :: lst = [lst]
      for const bundle of lst ::
        const paths = bundle.modules.map(e => e.id)
          .filter @ id => id
            && ! id.includes('/node_modules/')
            && ('\u0000' !== id[0])

        rebuildWatcher.add(paths)


watchAndBuild.forever = function(command=`babel-node rollup.cfg.jsy --watch-impl`) ::
  while true ::
    execSync @ command, @{} stdio: 'inherit'
    console.log @ `\n\nRestarting rollup watch\n\n`

