
export default connectReloadEventSource
export function connectReloadEventSource(url='__live__', update) ::
  if null == update ::
    const uid = Date.now().toString(36)
    update = function (live_changes) ::
      console.log @ `Live reload (${uid})`
      reloadDataLiveElements(live_changes, document)

  const _global_key_ = `@@live-reload ${url}`
  if null != window[_global_key_] ::
    window[_global_key_].close()
    window[_global_key_] = null

  const es = new EventSource(url)
  window[_global_key_] = es

  es.onopen = function (err) :: console.warn @ 'Live reload ready'
  es.onerror = function (err) :: console.warn @ 'Live reload NOT ready'

  es.onmessage = function (evt) ::
    try ::
      var live_changes = JSON.parse @ evt.data
      update(live_changes)
    catch err ::
      return console.error(err)
  return es

export function reloadDataLiveElements(live_changes, rootDoc=document) ::
  for const el of rootDoc.querySelectorAll @ '[data-live]' ::
    const [attr, change_key] = el.dataset['live'].split(' ')
    const value = live_changes[change_key]
    if ! value || (el[attr] || '').endsWith(value) ::
      continue // unchanged

    replaceElement @ el, {[attr]: value}

export function replaceElement(element, changes) ::
  const el = element.ownerDocument.createElement(element.nodeName)
  for const a of element.attributes ::
    el.setAttribute @ a.name, changes[a.name] || a.value

  element.parentNode.replaceChild(el, element)
  return el

